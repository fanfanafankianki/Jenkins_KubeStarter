pipeline {
	agent any
	
	stages {
	    
        stage('Retrieve Artifact') {
            steps {
                // Skopiowanie artefaktu z innego joba
                copyArtifacts(projectName: 'KubeStarter', filter: 'Kube_WorkerCount.txt');
            }
        }
        stage('Destroy Cloudformation with KubeMaster') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "awscredentials",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {

                        def stackName = "myKubeMaster"
                        def region = "eu-west-1"
                        // Usunięcie stosu CloudFormation
                        sh "aws cloudformation delete-stack --stack-name ${stackName} --region ${region}"

                         // Opcjonalnie: Czekanie na usunięcie stosu
                        sh "aws cloudformation wait stack-delete-complete --stack-name ${stackName} --region ${region}"

                    }
                }
            }
		}
        stage('Destroy Cloudformation with KubeWorkers') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "awscredentials",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {

                        def baseStackName = "myKubeWorker"
                        def region = "eu-west-1"
                        def count_workers = readFile 'Kube_WorkerCount.txt'
                        echo "Zawartość pliku Kube_WorkerCount.txt: ${count_workers}"    
                        def count = count_workers.toInteger()
                        for(int i = count - 1; i >= 0; i--) {
                            def stackName = "${baseStackName}${i}"
                            // Usunięcie stosu CloudFormation
                            sh "aws cloudformation delete-stack --stack-name ${stackName} --region ${region}"

                            // Opcjonalnie: Czekanie na usunięcie stosu
                            sh "aws cloudformation wait stack-delete-complete --stack-name ${stackName} --region ${region}"
                        }
                    }
                }
            }
		}
	}
}