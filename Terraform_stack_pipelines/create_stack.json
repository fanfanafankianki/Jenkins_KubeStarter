pipeline {
agent any

    environment {
        PRIVATE_KEY = credentials('kube_ssh')
        TERRAFORM_CLOUD_TOKEN = credentials('TERRAFORM_CLOUD_TOKEN')
    }

    stages {
        stage('Fetch code') {
            steps {
                sshagent(['SSH_private_key']) {
                    git branch: 'main', url: 'git@github.com:fanfanafankianki/Jenkins_KubeStarter.git'
                }
            }
        }
        stage('Create MASTER x1') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'awscredentials'],
                    string(credentialsId: 'TERRAFORM_CLOUD_TOKEN', variable: 'TERRAFORM_CLOUD_TOKEN')
                ]) {
                    script {
                        sh """
                        cd Terraform_stack_creation
                        echo 'credentials "app.terraform.io" { token = "${TERRAFORM_CLOUD_TOKEN}" }' > ~/.terraformrc
                        """

                        sh '''
                        cd Terraform_stack_creation
                        terraform init
                        terraform apply -auto-approve
                        '''
                    }
                }
            }
        }
        stage('Fetch Instance Details') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'awscredentials'],
                    string(credentialsId: 'TERRAFORM_CLOUD_TOKEN', variable: 'TERRAFORM_CLOUD_TOKEN')
                ]) {
                    script {
                        dir('Terraform_stack_creation') {
                            // Ensure terraform output is run in the correct directory
                            def master_instance_ip = sh(script: "terraform output -raw master_instance_public_ip", returnStdout: true).trim()
                            writeFile file: 'Ansible_provisioning/master/master_public_ip.txt', text: master_instance_ip

                            def worker_instance_ip = sh(script: "terraform output -raw worker_instance_public_ip", returnStdout: true).trim()
                            writeFile file: 'Ansible_provisioning/worker/worker_public_ip.txt', text: worker_instance_ip

                            def master_private_key = sh(script: "terraform output -raw master_private_key_pem", returnStdout: true).trim()
                            writeFile file: 'Ansible_provisioning/master/master_key.pem', text: master_private_key

                            def worker_private_key = sh(script: "terraform output -raw worker_private_key_pem", returnStdout: true).trim()
                            writeFile file: 'Ansible_provisioning/worker/worker_key.pem', text: worker_private_key

                            // Debugging: Print the outputs
                            echo "Master IP: ${master_instance_ip}"
                            echo "Worker IP: ${worker_instance_ip}"
                            echo "Master Key: ${master_private_key}"
                            echo "Worker Key: ${worker_private_key}"
                            sh """
                            echo 'EC2_MASTER ansible_host=${master_instance_ip} ansible_user=ubuntu' >> Ansible_provisioning/master/hosts
                            echo 'EC2_WORKER ansible_host=${worker_instance_ip} ansible_user=ubuntu' >> Ansible_provisioning/worker/hosts
                            """
                        }
                        // Further actions
                        sh """
                        ls
                        cd Terraform_stack_creation/Ansible_provisioning/master
                        ls
                        cat master_public_ip.txt
                        cat master_key.pem
                        cat hosts
                        ls
                        ansible-playbook -i hosts --private-key master_key.pem --ssh-extra-args="-o StrictHostKeyChecking=no" provisioning.yaml
                        cd ../../worker
                        cat worker_public_ip.txt
                        cat worker_key.pem
                        cat hosts
                        ls
                        ansible-playbook -i hosts --private-key worker_key.pem --ssh-extra-args="-o StrictHostKeyChecking=no" provisioning.yaml
                        """
                    }
                }
            }
        }
    }
}
